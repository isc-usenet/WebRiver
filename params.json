{"name":"WebRiver","body":"NOTE: WebRiver is still in an ALPHA state. If you run into bugs or problems with the software, please create an issue on the github issue tracker.\r\n\r\n\r\n## Introduction\r\nWebRiver is an HTTP and Web-based download/streaming tool for River files. The web interface shows the bandwidth being used both from Usenet downloading, as well as from the clients that are streaming files. It supports \"PVR mode\", which means once portions of the file are downloaded from Usenet, they are stored on the hard drive so future views won't download from Usenet again. It also allows automatic preloading, so when you begin to stream your media, it starts immediately.\r\nNotable features of WebRiver are:\r\n- HTTP interface to River files, which is supported by a large amount of media players\r\n- Lightweight, should run fine within 100MB of RAM and with a very underpowered CPU\r\n- Fast, responsive interface (interface response time normally less than 3ms)\r\n- Stream multiple files at once, or the same file seeked to different places\r\n- Record media files to WebRiver for later streaming\r\n- Bandwidth monitoring of both downloading from Usenet and uploading to HTTP clients\r\n- Automatic, on-the-fly PAR2 recovery and handling\r\n- Download River files from HTTP or via RLinks, or upload directly to WebRiver\r\n- Backup server option for missing articles from different Usenet provider\r\n- Proper cp437 NFO viewer\r\n\r\n\r\n## Requirements\r\n- Python 2.7\r\n- gevent\r\n- flask\r\n- python-yenc\r\n\r\n\r\n## Downloading\r\nAs WebRiver is currently in an ALPHA state, the only way to get it is to download a tarball of HEAD or clone from GitHub.\r\n\r\nIf you know how to use git, clone from https://github.com/isc-usenet/WebRiver.git\r\n\r\nOtherwise, download the HEAD tarball from https://github.com/isc-usenet/WebRiver/tarball/master\r\n\r\nYou can also download the tarball or zip archive from the top of this page.\r\n\r\n\r\n## Installing\r\nAs WebRiver is currently in an ALPHA state, there is no method to install it. Enter the directory that WebRiver resides in and run the command:\r\n\r\n`python2.7 webriver.py`\r\n\r\nThis will give you a link to the web interface, which can be used to configure WebRiver.\r\n\r\n\r\n## Configuration\r\nConfiguration of WebRiver is fairly self-explanitory\r\n\r\n![Configuration page](images/configuration.png)\r\n\r\n### Main Server\r\nAll Usenet downloading will be done from the Main Server - that is, the one on the left. At your option, you can test the server to make sure you entered the correct credentials.\r\n\r\n\r\n### Backup Server\r\nIf you have a backup server you want to use, Check the box beside Backup Server on the right, and it will allow you to enter in the settings for that server. At your option, you can test the server to make sure you entered the correct credentials.\r\n\r\n\r\n### Require Authentication\r\nIf you want WebRiver to be password-protected by HTTP authentication (media streams are not affected by this), you have the option to set a username and password when thie checkbox is checked.\r\n\r\n\r\n### PVR Mode\r\nSaves downloaded data to the hard drive. If a media file is streamed twice when this is enabled, the first time will download from Usenet and the second time will load from the hard drive. It can be used to save bandwidth when files are frequently watched more than once.\r\n\r\n\r\n### Auto Record (Requires PVR Mode)\r\nWhen a River file is added to the WebRiver interface with this option checked, WebRiver will automatically record the entire file to the hard drive, rather than streaming it on demand. This can be stopped at any time with the stop button on the WebRiver interface.\r\n\r\n\r\n### Preload (Requires PVR Mode)\r\nWhen a River file is added to the WebRiver interface with this option checked, WebRiver will automatically record the first several megabytes of the file, then stop when that has been downloaded. This is recommended, as it allows streams to start immediately. If this option is not checked, streams should normally start in between 2-10 seconds depending on the internet connection. If the\r\nAuto Record option is also checked, the Preload option will be ignored.\r\n\r\n\r\nOnce you have set up WebRiver to your liking, you may hit \"Save Configuration\". This will bring you to the WebRiver main interface.\r\n\r\n## Using WebRiver\r\n\r\n![Rivers page](images/rivers.png)\r\n\r\nThis is the main WebRiver interface. At the top you have two tabs: Rivers and Options.\r\nYou can also add new River files to the interface by uploading from a local file as well as by making WebRiver download it from an HTTP link, FTP link, or from Usenet itself via a River Link.\r\nYou have the ability to change the refresh rate of the interface, which is one second by default. At the very right of the top bar, you have an indicator that shows both the download rate from Usenet (downward chevron), and the upload rate to any streaming clients (upward chevron). By clicking on this, you can view all active clients currently streaming media from the WebRiver instance.\r\n\r\n![Link Details](images/linkdetails.png)\r\n\r\n### Rivers\r\nThe River tab shows all of the Rivers currently loaded in WebRiver. It shows the name (or filename if the River file has no metadata), the status of said River (Idle, Streaming, Recording, Complete), the position that the streaming client is currently at (or 99% if more than one client), any available actions for this River, and a button to remove the River.\r\n\r\nThe topmost remove button clears all River files. All Rivers will have a Download action. You can left-click this to download straight from your web browser. If, however, you want to stream this in VLC, mplayer or any other client, make sure to right-click the download button, choose \"Copy Link Location\" or \"Copy URL\" and paste it into the client or media player.\r\n\r\nIf PVR mode is enabled, you will also have a Record action, which allows you to save the media to disk in the background without needing to stream or download it. Some river files will also have NFO files in them, which will show up in Actions as an NFO button.\r\n\r\nAs this is an ALPHA release, the logs are not currently used, however they are a mechanism to give feedback to the user when something goes wrong. They can be multi-line and can go into as much detail as needed. As time goes on, this feature will be used more often, though currently the majority of things that go wrong will be shown in the console.\r\n\r\n### Options\r\n![Options page](images/options.png)\r\n\r\nThis page is laid out the same as the initial configuration page that shows up when you start WebRiver for the first time. The main difference with this page that must be kept in mind, however, is that the server settings will not come into effect until WebRiver is restarted. We may be able to change this in a future non-ALPHA version, but is currently not a priority.\r\n","tagline":"Instructions for using WebRiver","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}